{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","c","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","result","json","data","gifs","map","img","id","title","images","downsized","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAiCeA,EA9BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACLC,mBAAS,IADJ,mBAClCC,EADkC,KACtBC,EADsB,KAezC,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAe,SAAAS,GAAC,OAAMP,GAAN,mBAAqBO,OACrCN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,MAAQT,EACRU,SAjBmB,SAACP,GACxBF,EAAcE,EAAEQ,OAAOF,a,+BCPdG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEfC,EAFe,iDAEkCC,UAAUH,GAF5C,+DAGAI,MAAMF,GAHN,cAGfG,EAHe,gBAIEA,EAAOC,OAJT,uBAIbC,EAJa,EAIbA,KAGFC,EAAOD,EAAKE,KAAI,SAAAC,GAAG,YAAK,CAC5BC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,UAAUZ,QAVR,kBAYdM,GAZc,4CAAH,sDCWLO,EATK,SAAC,GAAoB,IAAlBb,EAAiB,EAAjBA,IAAKU,EAAY,EAAZA,MAC1B,OACE,sBAAKI,UAAU,OAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCkBKO,EAnBC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFN,SAAEA,GAAe,IAAD,EAChBd,mBAAS,CACjCqB,KAAM,GACNa,SAAS,IAH+B,mBACnCC,EADmC,KAC5BC,EAD4B,KAgB1C,OAVAC,qBAAU,WACRxB,EAAQC,GACPwB,MAAK,SAAAhB,GACJc,EAAS,CACPf,KAAMC,EACNY,SAAS,SAGZ,CAAEpB,IAEEqB,EDb2BI,CAAczB,GAAlCa,EADkB,EACxBN,KAAca,EADU,EACVA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,kDAAd,SAAkEhB,IAChEoB,GAAW,mBAAGJ,UAAU,qDAAb,yBACb,qBAAKA,UAAU,8CAAf,SACIH,EAAOJ,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAEOA,GADCA,EAAIC,aEUTe,EArBM,WAAO,IAAD,EACWxC,mBAAS,CAAC,SADrB,mBAClByC,EADkB,KACN1C,EADM,KAGzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BAEI0C,EAAWlB,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEEA,SAAWA,GADLA,Y,MCTpB4B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.0b6eeeea.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputValue = (e) =>{\n    setInputValue(e.target.value)\n  };\n\n  const handleSubmit = (e) =>{\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories( c => [ inputValue, ...c ]);\n      setInputValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={ handleSubmit }>\n      <input\n        type=\"text\"\n        value={ inputValue }\n        onChange={ handleInputValue }\n      />\n    </form>\n  );\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;\n","export const getGifs = async ( category ) => {\n\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=PlWDtfT2YD09AY9EHc6u02Ym8v33cxuL`;\n  const result = await fetch(url);\n  const { data } = await result.json();\n\n  // extraemos las propiedades que ns harÃ¡n falta\n  const gifs = data.map(img => ({\n    id: img.id,\n    title: img.title,\n    url: img.images?.downsized.url,\n  }));\n  return(gifs);\n};\n","import React from 'react'\n\nconst GifGridItem = ({ url, title }) => {\n  return (\n    <div className=\"card\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  )\n}\n\nexport default GifGridItem;\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs( category );\n\n  return (\n    <>\n      <h3 className=\"card-grid animate__animated animate__fadeInDown\">{ category }</h3>\n      { loading && <p className=\"animate__animated animate__pulse animate__infinite\">Cargando...</p> }\n      <div className=\"card-grid animate__animated animate__fadeIn\">\n        { images.map( img  => (\n            <GifGridItem\n              key={ img.id }\n              { ...img } />\n          ))\n        } \n      </div>\n    </>\n  )\n}\n\nexport default GifGrid;","import { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = ( category ) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  })\n\n  useEffect(() => {\n    getGifs(category)\n    .then(gifs => {\n      setState({\n        data: gifs,\n        loading: false,\n      })\n    })\n  }, [ category ])\n\n  return state;\n};\n","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState(['Goku']);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={ setCategories } />\n      <hr />\n      <ol>\n        {\n          categories.map(category => (\n            <GifGrid\n              key={ category }\n              category={ category } />\n          ))\n        }\n      </ol>\n    </>\n  )\n}\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}